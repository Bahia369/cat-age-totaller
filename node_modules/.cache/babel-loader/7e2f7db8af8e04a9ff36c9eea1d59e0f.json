{"ast":null,"code":"import _slicedToArray from \"/Users/suman/Documents/GitHub/cat-age-totaller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/suman/Documents/GitHub/cat-age-totaller/src/AgeCounter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AgeCounter(props) {\n  _s();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentAge = _useState2[0],\n      setCurrentAge = _useState2[1];\n\n  var catAge = currentAge < 9 ? \"Young\" : \"Old\";\n\n  function updateTheAge(changeBy) {\n    setCurrentAge(currentAge + changeBy);\n    props.update(changeby);\n  }\n\n  return;\n\n  /*#__PURE__*/\n  _jsxDEV(\"div\", {\n    classname: \"AgeCounter \".concat(catAge),\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onclick: function onclick() {\n        return updateTheAge(1);\n      },\n      children: \"Add A Year\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onclick: function onclick() {\n        return updateTheAge(-currentAge);\n      },\n      children: \"Add New Life\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentAge\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: props.cat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }, this);\n} // 1. Create a AgeCounter component which uses useState to store the current age and has two buttons - one to add a year (increment state by 1) and one to add a new life (set state back to 0). Create these functions and use the onClick event on the buttons to use them. Display the current age within the AgeCounter component in a h3 tag. Use a className of \".AgeCounter\" for the component (it should be a div with a h3 tag and two buttons inside, the CSS is already provided in styles.css).\n\n_s(AgeCounter, \"SIlNgyiu4NKjaBbQ/ZgIaRhaod4=\");\n\n_c = AgeCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AgeCounter\");","map":{"version":3,"sources":["/Users/suman/Documents/GitHub/cat-age-totaller/src/AgeCounter.js"],"names":["React","useState","AgeCounter","props","currentAge","setCurrentAge","catAge","updateTheAge","changeBy","update","changeby","cat"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACxC,kBAAoCF,QAAQ,CAAC,CAAD,CAA5C;AAAA;AAAA,MAAOG,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,MAAM,GAAGF,UAAU,GAAG,CAAb,GAAiB,OAAjB,GAA2B,KAA1C;;AAEA,WAASG,YAAT,CAAsBC,QAAtB,EAAgC;AAC9BH,IAAAA,aAAa,CAACD,UAAU,GAAGI,QAAd,CAAb;AACAL,IAAAA,KAAK,CAACM,MAAN,CAAaC,QAAb;AACD;;AAED;;AAEA;AAAA;AAAK,IAAA,SAAS,uBAAgBJ,MAAhB,CAAd;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMC,YAAY,CAAC,CAAD,CAAlB;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMA,YAAY,CAAC,CAACH,UAAF,CAAlB;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA,gBAAKD,KAAK,CAACQ;AAAX;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAMD,C,CACD;;GAnBwBT,U;;KAAAA,U","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function AgeCounter(props) {\n  const [currentAge, setCurrentAge] = useState(0);\n\n  const catAge = currentAge < 9 ? \"Young\" : \"Old\";\n\n  function updateTheAge(changeBy) {\n    setCurrentAge(currentAge + changeBy);\n    props.update(changeby);\n  }\n\n  return;\n\n  <div classname={`AgeCounter ${catAge}`}>\n    <button onclick={() => updateTheAge(1)}>Add A Year</button>\n    <button onclick={() => updateTheAge(-currentAge)}>Add New Life</button>\n    <h3>{currentAge}</h3>\n    <h4>{props.cat}</h4>\n  </div>;\n}\n// 1. Create a AgeCounter component which uses useState to store the current age and has two buttons - one to add a year (increment state by 1) and one to add a new life (set state back to 0). Create these functions and use the onClick event on the buttons to use them. Display the current age within the AgeCounter component in a h3 tag. Use a className of \".AgeCounter\" for the component (it should be a div with a h3 tag and two buttons inside, the CSS is already provided in styles.css).\n"]},"metadata":{},"sourceType":"module"}